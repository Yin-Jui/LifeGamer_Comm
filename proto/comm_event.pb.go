// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm_event.proto

package comm_event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// =================== RawData ===================
type RawRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawRequest) Reset()         { *m = RawRequest{} }
func (m *RawRequest) String() string { return proto.CompactTextString(m) }
func (*RawRequest) ProtoMessage()    {}
func (*RawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2782677af24cacf, []int{0}
}
func (m *RawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawRequest.Unmarshal(m, b)
}
func (m *RawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawRequest.Marshal(b, m, deterministic)
}
func (m *RawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawRequest.Merge(m, src)
}
func (m *RawRequest) XXX_Size() int {
	return xxx_messageInfo_RawRequest.Size(m)
}
func (m *RawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RawRequest proto.InternalMessageInfo

func (m *RawRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RawReply struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawReply) Reset()         { *m = RawReply{} }
func (m *RawReply) String() string { return proto.CompactTextString(m) }
func (*RawReply) ProtoMessage()    {}
func (*RawReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2782677af24cacf, []int{1}
}
func (m *RawReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawReply.Unmarshal(m, b)
}
func (m *RawReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawReply.Marshal(b, m, deterministic)
}
func (m *RawReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawReply.Merge(m, src)
}
func (m *RawReply) XXX_Size() int {
	return xxx_messageInfo_RawReply.Size(m)
}
func (m *RawReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RawReply.DiscardUnknown(m)
}

var xxx_messageInfo_RawReply proto.InternalMessageInfo

func (m *RawReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*RawRequest)(nil), "comm_event.RawRequest")
	proto.RegisterType((*RawReply)(nil), "comm_event.RawReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommClient is the client API for Comm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommClient interface {
	// send raw
	RawData(ctx context.Context, in *RawRequest, opts ...grpc.CallOption) (*RawReply, error)
}

type commClient struct {
	cc *grpc.ClientConn
}

func NewCommClient(cc *grpc.ClientConn) CommClient {
	return &commClient{cc}
}

func (c *commClient) RawData(ctx context.Context, in *RawRequest, opts ...grpc.CallOption) (*RawReply, error) {
	out := new(RawReply)
	err := c.cc.Invoke(ctx, "/comm_event.Comm/RawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommServer is the server API for Comm service.
type CommServer interface {
	// send raw
	RawData(context.Context, *RawRequest) (*RawReply, error)
}

func RegisterCommServer(s *grpc.Server, srv CommServer) {
	s.RegisterService(&_Comm_serviceDesc, srv)
}

func _Comm_RawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommServer).RawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comm_event.Comm/RawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommServer).RawData(ctx, req.(*RawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Comm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm_event.Comm",
	HandlerType: (*CommServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawData",
			Handler:    _Comm_RawData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_event.proto",
}

func init() { proto.RegisterFile("comm_event.proto", fileDescriptor_c2782677af24cacf) }

var fileDescriptor_c2782677af24cacf = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0xcf, 0xcd,
	0x8d, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x29, 0x70, 0x71, 0x05, 0x25, 0x96, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09,
	0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a,
	0x72, 0x5c, 0x1c, 0x60, 0x15, 0x05, 0x39, 0x95, 0x20, 0xf9, 0x94, 0xc4, 0x92, 0x44, 0x98, 0x3c,
	0x88, 0x6d, 0xe4, 0xc8, 0xc5, 0xe2, 0x9c, 0x9f, 0x9b, 0x2b, 0x64, 0xc9, 0xc5, 0x1e, 0x94, 0x58,
	0xee, 0x92, 0x58, 0x92, 0x28, 0x24, 0xa6, 0x87, 0x64, 0x27, 0xc2, 0x78, 0x29, 0x11, 0x0c, 0xf1,
	0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xbb, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0x30, 0xe5, 0x62, 0xab, 0x00, 0x00, 0x00,
}
